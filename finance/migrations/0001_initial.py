# Generated by Django 5.0.2 on 2024-02-26 23:52

import core.utils
import datetime
import django.contrib.postgres.fields.ranges
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExpenditureType',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=400)),
            ],
        ),
        migrations.CreateModel(
            name='IncomeType',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Amount of money to be taxed', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='The actual amount being paid as tax', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('gross_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total amount on the income', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='Income',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('purpose', models.CharField(max_length=500)),
                ('payer', models.CharField(blank=True, max_length=400, null=True)),
                ('income_date', models.DateField(default=datetime.date.today)),
                ('payment_method', models.CharField(choices=[('Money money', 'Mobile_money'), ('Bank', 'Bank'), ('Cash', 'Cash')], default='Bank', max_length=200)),
                ('academic_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicterm')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicyear')),
                ('student', models.ForeignKey(blank=True, help_text="this is null if it's not fees", null=True, on_delete=django.db.models.deletion.CASCADE, to='core.student')),
                ('uploaded_file', models.ManyToManyField(blank=True, to='core.organizationdocument')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('income_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.incometype')),
                ('tax', models.ManyToManyField(blank=True, to='finance.tax')),
            ],
        ),
        migrations.CreateModel(
            name='PayrollRun',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('period', django.contrib.postgres.fields.ranges.DateRangeField(default=core.utils.get_payrun_period)),
                ('total_basic', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_chargeable_income', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('Draft', 'Draft'), ('Processed', 'Processed'), ('Approved', 'Approved')], default='Draft', max_length=100)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approval_user', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payrun_creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payroll',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('basic_salary', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total gross salary before deductions', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('paid_ssnit', models.BooleanField(default=False)),
                ('ssnit_amount', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0'), help_text='Amount to be paid as a SSNIT deduction without tier 3', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('tier_three', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0'), help_text='Amount to be paid as Tier 3 if applicable', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('cash_allowance', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0'), help_text='Any allowance that does not attract tax deductions', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('bonus_income', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Any bonus attracted by contract or performance', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('final_tax_on_bonus', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total tax on bonus - this tax', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('excess_bonus', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_cash_amolument', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Sum of basic salary, cash allowance and excess bonus', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('vehicle_elements', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('non_cash_benefits', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Cost of non cash benefits', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('accessible_income', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Total of salary, bonus and benefits', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('deductible_relief', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('total_relief', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='sum of SSNIT, tier 3 and deductible reliefs', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('chargeable_income', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Difference btn total accessible income and total reliefs', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_deductible', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('overtime_income', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('overtime_tax', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('tax_payable', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='sum of Tax on bonus income, tax deductible and overtime tax', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('severance_paid', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('remarks', models.CharField(blank=True, max_length=700, null=True)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.staff')),
                ('payrun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.payrollrun')),
            ],
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('purpose', models.JSONField(blank=True, null=True)),
                ('file', models.FileField(upload_to='receipts')),
                ('receipt_number', models.CharField(max_length=100, unique=True)),
                ('income', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.income')),
            ],
        ),
        migrations.CreateModel(
            name='SalaryBand',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=300, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('benefit_package', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentDetail',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('bank_account_number', models.CharField(blank=True, max_length=300, null=True)),
                ('bank_name', models.CharField(blank=True, max_length=300, null=True)),
                ('bank_branch', models.CharField(blank=True, max_length=300, null=True)),
                ('bank_sort_code', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_iban', models.CharField(blank=True, max_length=200, null=True)),
                ('mobile_money_number', models.CharField(blank=True, max_length=100, null=True)),
                ('mobile_money_network', models.CharField(blank=True, max_length=200, null=True)),
                ('add_cash_allowance_before_tax', models.BooleanField(default=False)),
                ('social_security_number', models.CharField(blank=True, max_length=300, null=True)),
                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_payment_details', to='core.staff')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('salary_band', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_band_payment', to='finance.salaryband')),
            ],
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('full_name', models.CharField(max_length=500, unique=True)),
                ('company_name', models.CharField(max_length=500, unique=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('telephone', models.CharField(blank=True, max_length=150, null=True)),
                ('image', models.ImageField(blank=True, help_text='Logo of the supplier', null=True, upload_to='suppliers')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Expenditure',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('0'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('purpose', models.CharField(max_length=500)),
                ('invoice', models.FileField(blank=True, null=True, upload_to='invoices')),
                ('expense_date', models.DateField(default=datetime.date.today)),
                ('payment_type', models.CharField(choices=[('Invoice', 'Invoice'), ('Petty Cash', 'Petty_cash')], default='Invoice', max_length=100)),
                ('payment_method', models.CharField(choices=[('Money money', 'Mobile_money'), ('Bank', 'Bank'), ('Cash', 'Cash')], default='Bank', max_length=200)),
                ('academic_term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicterm')),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicyear')),
                ('uploaded_file', models.ManyToManyField(blank=True, to='core.organizationdocument')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('expenditure_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.expendituretype')),
                ('supplier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='finance.supplier')),
            ],
        ),
        migrations.CreateModel(
            name='TaxConfig',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the Tax. e.g PAYE, Witholding, etc', max_length=250)),
                ('tax_percent', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='Percentage to be applied as tax', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('flat_tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0'), help_text='If tax is a flat amount rather than a percentage rate', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organizationconfig')),
            ],
        ),
        migrations.AddField(
            model_name='tax',
            name='tax_config',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.taxconfig'),
        ),
    ]
